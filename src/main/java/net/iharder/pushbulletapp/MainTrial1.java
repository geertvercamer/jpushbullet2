/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package net.iharder.pushbulletapp;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.net.URL;
import java.util.List;
import java.util.prefs.Preferences;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import net.iharder.jpushbullet2.Callback;
import net.iharder.jpushbullet2.Push;
import net.iharder.jpushbullet2.PushbulletClient;
import net.iharder.jpushbullet2.PushbulletEvent;
import net.iharder.jpushbullet2.PushbulletException;
import net.iharder.jpushbullet2.PushbulletListener;
import net.iharder.jpushbullet2.User;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;

/**
 *
 * @author rob
 */
public class MainTrial1 extends javax.swing.JFrame implements PropertyChangeListener, PushbulletListener {

    //private static final Logger LOGGER = LoggerFactory.getLogger(MainTrial1.class);
    private final Log LOGGER = LogFactory.getLog(getClass());

    private PropertyChangeSupport propertyChangeSupport = new java.beans.PropertyChangeSupport(this);
    private PushbulletClient pbClient;
    private DefaultListModel<ListPushElement> pushListModel = new DefaultListModel<ListPushElement>();
    
    /**
     * Creates new form MainTrial1
     */
    public MainTrial1() {
        initComponents();
        myInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        sendPanel = new javax.swing.JPanel();
        receivePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        settingsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        apiKeyTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        setApiKeyButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout sendPanelLayout = new javax.swing.GroupLayout(sendPanel);
        sendPanel.setLayout(sendPanelLayout);
        sendPanelLayout.setHorizontalGroup(
            sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
        );
        sendPanelLayout.setVerticalGroup(
            sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 242, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Send", sendPanel);

        jList1.setModel(pushListModel);
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout receivePanelLayout = new javax.swing.GroupLayout(receivePanel);
        receivePanel.setLayout(receivePanelLayout);
        receivePanelLayout.setHorizontalGroup(
            receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receivePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
        );
        receivePanelLayout.setVerticalGroup(
            receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receivePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Receive", receivePanel);

        jLabel1.setText("API Key:");

        apiKeyTextField.setText(getApiKey());

        jLabel2.setText("Name:");

        setApiKeyButton.setText("Set");
        setApiKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setApiKeyButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Email:");

        jLabel4.setText("Image:");

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(apiKeyTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setApiKeyButton))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setApiKeyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(emailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Settings", settingsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setApiKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setApiKeyButtonActionPerformed
        this.usernameLabel.setEnabled(false);
        this.emailLabel.setEnabled( false );
        this.imageLabel.setEnabled(false);
        this.setApiKey( this.apiKeyTextField.getText() );
    }//GEN-LAST:event_setApiKeyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainTrial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainTrial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainTrial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainTrial1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainTrial1().setVisible(true);
            }
        });
    }


    private void myInitComponents() {
        this.pbClient = new PushbulletClient();
        this.pbClient.addPushbulletListener( this );
        this.addPropertyChangeListener( this );
        setApiKey( Preferences.userNodeForPackage(this.getClass()).get(PROP_APIKEY, null) );
    }

    
    
    private String apiKey;

    public static final String PROP_APIKEY = "apiKey";

    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(String apiKey) {
        String oldApiKey = this.apiKey;
        this.apiKey = apiKey;
        propertyChangeSupport.firePropertyChange(PROP_APIKEY, oldApiKey, apiKey);
    }



    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.addPropertyChangeListener(listener);
    }

    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertyChangeSupport.removePropertyChangeListener(listener);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField apiKeyTextField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel receivePanel;
    private javax.swing.JPanel sendPanel;
    private javax.swing.JButton setApiKeyButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if( this.equals( evt.getSource() ) ){
            if( PROP_APIKEY.equals(evt.getPropertyName()) ){
                    handleNewApiKey();
            }   // end if
        }   // end if: this
    }

    private void handleNewApiKey() {
        String key = getApiKey();
        Preferences.userNodeForPackage(this.getClass()).put(PROP_APIKEY, key);
        this.apiKeyTextField.setText( key );
        this.pbClient.stopWebsocket();
        this.pbClient.setApiKey(key);
        this.pushListModel.clear();
        this.pbClient.getPushesAsync(100, true, new Callback<List<Push>>() {
            @Override
            public void completed(final List<Push> result, PushbulletException ex) {
                if( result != null ){
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            for( Push p : result ){
                                pushListModel.addElement(new ListPushElement(p));
                            }
                        }
                    });
                } else {
                    // When null, all pages are complete
                    pbClient.startWebsocket();
                }
            }
        } );
        this.pbClient.getMeAsync( new Callback<User>() {
            @Override
            public void completed(final User me, PushbulletException ex) {
                // Load and resize image
                BufferedImage bimg = null;
                Image tempImg = null;
                try {
                    bimg = ImageIO.read(new URL( me.getImage_url() ) );
                    int labelWidth = imageLabel.getWidth();
                    int labelHeight = imageLabel.getHeight();
                    float lw2lh = 1.0f * labelWidth / labelHeight;
                    int imgWidth = bimg.getWidth();
                    int imgHeight = bimg.getHeight();
                    float iw2ih = 1.0f * imgWidth / imgHeight;
                    Image i = null;
                    if( iw2ih > lw2lh ){
                        tempImg = bimg.getScaledInstance( labelWidth, (int)(labelWidth/iw2ih),Image.SCALE_SMOOTH);
                    } else {
                        tempImg = bimg.getScaledInstance( (int)(labelHeight * iw2ih), labelHeight, Image.SCALE_SMOOTH);
                    }
                } catch (Exception ex1) {
                    //Logger.getLogger(MainTrial1.class.getName()).log(Level.SEVERE, null, ex1);
                }
                final Image img = tempImg;
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        usernameLabel.setText( me == null ? "error" : me.getName() );
                        emailLabel.setText( me == null ? "" : me.getEmail() );
                        imageLabel.setIcon( img == null ? null : new ImageIcon( img ) );
                        usernameLabel.setEnabled(true);
                        emailLabel.setEnabled( true );
                        imageLabel.setEnabled(true);
                    }
                });
            }
        } );
    }

    @Override
    public void pushReceived(final PushbulletEvent pushEvent) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                for( Push p : pushEvent.getPushes() ){
                    pushListModel.insertElementAt(new ListPushElement(p),0);
                }
            }
        });
    }

    @Override
    public void devicesChanged(PushbulletEvent pushEvent) {
        
    }

    @Override
    public void websocketEstablished(PushbulletEvent pushEvent) {
        
    }
    
    
    private static class ListPushElement {
        String text = "";
        ListPushElement( Push p ){
            text = p.getType() + " " + p.getTitle() + " " + p.getBody();
        }
        @Override
        public String toString(){ return text; }
    }
    
    
}
